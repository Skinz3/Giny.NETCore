@using Giny.IO.D2I;
@using Giny.IO.D2O;
@using Giny.IO.D2OClasses;
@using Giny.World.Records.Maps;
@using Giny.World.Records.Monsters;
@using Giny.WorldEditor.Caching;
@using Giny.WorldEditor.Config;
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Components;
@using MudBlazor.Services;
@using System.Reflection;
@using System.Collections;
@inject IDialogService DialogService


<MudGrid>
    <MudItem xs="3">

        <MudPaper Outlined=true>
            <MudList Dense="true" Clickable="true">
                <MudListSubheader>
                    <MudTextField Label="Search" TextChanged=OnSearchTextChanged @bind-Value="@Search"
                                  AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Filled.Search"
                                  Adornment="Adornment.End" Immediate="true" Variant="Variant.Outlined" />
                </MudListSubheader>

                <div style="height:70vh;overflow-y:scroll">
                    <Virtualize Items="@DungeonSearchResults">
                        <MudListItem OnClick="() => SelectDungeon(context)" Text=@(context.Name + " ("+context.Rooms.Count+")") />
                    </Virtualize>
                </div>

            </MudList>

        </MudPaper>
    </MudItem>


    @if (SelectedDungeon != null)
    {
        <MudItem xs="9">
            <MudPaper MinHeight="900px" Class="d-flex flex-column flex-grow-1 gap-4 pa-6" Outlined=false Elevation="3">

                <div>
                    <MudText Typo="Typo.h5"> @SelectedDungeon.Name</MudText>
                    <MudText Typo="Typo.caption">Level @SelectedDungeon.OptimalPlayerLevel </MudText>
                </div>


                <div class="d-flex pa-2 gap-4">
                    <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Outlined.LocationOn" ReadOnly=@true Value="@SelectedDungeon.EntranceMapId" Label="Entrée" />
                    <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Outlined.LocationOn" ReadOnly=@true Value="@SelectedDungeon.ExitMapId" Label="Sortie" />

                </div>


                <MudTabs AlwaysShowScrollButtons="false" Color="Color.Surface" @bind-ActivePanelIndex="@RoomIndex" Elevation="0" Outlined=true Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-4">


                    @foreach (var room in SelectedDungeon.Rooms)
                    {
                        <MudTabPanel Text="@("Room "+(SelectedDungeon.Rooms.Keys.ToList().IndexOf(room.Key)+1).ToString())">




                            @if (RoomIndex >= 0)
                            {
                                <div class="d-flex pa-2">
                                    <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.DriveFileRenameOutline" ReadOnly=@true Value="@MapPositionRecord.GetMapName(CurrentRoom.Key)" Label="Name" />

                                </div>
                                <div class="d-flex gap-4 pa-2">
                                    <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Outlined.LocationOn" ReadOnly=@true Value="@CurrentRoom.Key" Label="MapId" />
                                    <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Outlined.Timer" @bind-Value="@CurrentRoom.Value.RespawnDelay" Label="Respawn delay" />

                                </div>

                                @if (CurrentRoom.Value.MonsterIds.Count > 0)
                                {

                                    <MudDataGrid Class="mt-3" Dense=true Hover=true Striped=false Bordered=true Items="room.Value.MonsterIds">
                                        <Columns>

                                            <PropertyColumn Title="Id" Property="x => x.ToString()" />

                                            <TemplateColumn Title="Icon">
                                                <CellTemplate>
                                                    <MudImage Src="@(GetMonsterIcon(context.Item))" />
                                                </CellTemplate>
                                            </TemplateColumn>


                                            <PropertyColumn Property="x => MonsterRecord.GetMonsterRecord(x).Name" />

                                            <TemplateColumn Title="Actions">
                                                <CellTemplate>
                                                    <MudStack Row>
                                                    <MudButton Size="@Size.Small" StartIcon="@Icons.Material.Filled.Delete" IconColor="Color.Primary" Variant="@Variant.Text" Color="@Color.Primary">Delete</MudButton>
                                                </MudStack>
                                            </CellTemplate>
                                        </TemplateColumn>

                                    </Columns>
                                </MudDataGrid>
                                }
                                else
                                {
                                    <MudChip Class="mt-2" Color="Color.Primary" Variant="Variant.Text">No monsters in this room</MudChip>
                                }

                                                    }


                        </MudTabPanel>
                    }


                </MudTabs>



                <MudGrid Class="pa-3">
                    <MudItem xs="6">
                        <MudTextField Variant="Variant.Text" Immediate="true" Label="Nom" @bind-Value="MonsterSearch"></MudTextField>
                    </MudItem>
                    <MudItem xs="2">
                        <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="AddMonster" Variant="Variant.Text" Color="Color.Primary">Ajouter</MudButton>
                    </MudItem>
                </MudGrid>



                <MudGrid Class="pa-3">
                    <MudItem xs="6">
                        <MudPaper Outlined="true">

                            <MudList Color="Color.Secondary" Clickable="true">


                                @if (SearchResults.Count == 0)
                                {
                                    <MudText class="ml-2" Typo="Typo.caption">...</MudText>
                                }
                                <Virtualize Items="@SearchResults">
                                    <MudListItem OnClick="@(()=>{AddedMonster = context;MonsterSearch = AddedMonster.ToString();})">@context.ToString()</MudListItem>
                                </Virtualize>

                            </MudList>

                        </MudPaper>
                    </MudItem>
                </MudGrid>

            </MudPaper>


        </MudItem>


    }
</MudGrid>

@code {

    string m_searchValue
    {
        get;
        set;
    }
    string MonsterSearch
    {
        get
        {
            return m_searchValue;
        }
        set
        {
            m_searchValue = value;
            OnMonsterSearchChange();
        }
    }

    MonsterRecord AddedMonster
    {
        get;
        set;
    }
    List<MonsterRecord> SearchResults
    {
        get;
        set;
    } = new List<MonsterRecord>();

    void OnMonsterSearchChange()
    {
        if (MonsterSearch == "")
        {
            this.SearchResults = new List<MonsterRecord>();
            return;
        }
        this.SearchResults = MonsterRecord.GetMonsterRecords().Where(x => x.Name.ToLower().Contains(MonsterSearch.ToLower())).ToList();
    }

    string GetMonsterIcon(short monsterId)
    {
        var source = string.Format("data:image/png;base64,{0}", ExternalResources.GetMonsterIcon(monsterId));
        return source;
    }
    void AddMonster()
    {

        CurrentRoom.Value.MonsterIds.Add((short)AddedMonster.Id);
        StateHasChanged();
    }
    public void Closed(MudChip chip)
    {
        var record = (MonsterRecord)chip.Value;
        CurrentRoom.Value.MonsterIds.Remove((short)record.Id);
        StateHasChanged();
    }


    private string Search
    {
        get;
        set;
    } = "";
    private DungeonRecord SelectedDungeon
    {
        get; set;
    }
    private int RoomIndex
    {
        get;
        set;
    }
    private List<DungeonRecord> DungeonSearchResults
    {
        get;
        set;
    } = new List<DungeonRecord>();

    public KeyValuePair<long, MonsterRoom> CurrentRoom => SelectedDungeon.Rooms.ElementAt(RoomIndex);

    private void SelectDungeon(DungeonRecord dungeon)
    {
        this.SelectedDungeon = dungeon;
        RoomIndex = 0;
    }
    private void OnSearchTextChanged()
    {
        DungeonSearchResults = DungeonRecord.GetDungeonRecords().Where(x => x.ToString().ToLower().Contains(Search.ToLower())).ToList();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {

    }
}
