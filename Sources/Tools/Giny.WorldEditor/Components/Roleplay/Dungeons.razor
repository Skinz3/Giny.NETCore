@using Giny.IO.D2I;
@using Giny.IO.D2O;
@using Giny.IO.D2OClasses;
@using Giny.World.Records.Maps;
@using Giny.World.Records.Monsters;
@using Giny.WorldEditor.Caching;
@using Giny.WorldEditor.Components.Roleplay.Dialogs;
@using Giny.WorldEditor.Config;
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Components;
@using MudBlazor.Services;
@using System.Reflection;
@using System.Collections;
@using Giny.ORM;
@using System.Text.RegularExpressions;
@inject IDialogService DialogService


<MudGrid>
    <MudItem xs="3">

        <MudPaper Outlined=true>
            <MudList Dense="true" Clickable="true">
                <MudListSubheader>
                    <MudTextField Label="Search" TextChanged=OnSearchTextChanged @bind-Value="@Search"
                                  AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Filled.Search"
                                  Adornment="Adornment.End" Immediate="true" Variant="Variant.Outlined" />
                </MudListSubheader>

                <div style="height:80vh;overflow-y:scroll">
                    <Virtualize Items="@DungeonSearchResults">

                        <MudListItem OnClick="() => SelectDungeon(context)" Value="context">

                            <div class="d-flex flex-row gap-2 align-center">

                                <MudImage ObjectFit="ObjectFit.Fill" Width="60" Height="60" Src="@GetDungeonIcon(context)" />

                                <div class="d-flex flex-column">
                                    <MudText Style="font-size:14px;font-weight:600;line-height:16px">@context.Name</MudText>
                                    <MudText Typo=Typo.caption Style="line-height:16px">@context.Rooms.Count salles</MudText>

                                </div>
                            </div>

                        </MudListItem>

                    </Virtualize>
                </div>

            </MudList>

        </MudPaper>
    </MudItem>


    @if (SelectedDungeon != null)
    {
        <MudItem xs="9">
            <MudPaper MinHeight="900px" Class="d-flex flex-column flex-grow-1 gap-4 pa-6" Outlined=false Elevation="3">

                <div>
                    <MudText Typo="Typo.h5"> @SelectedDungeon.Name</MudText>
                    <MudText Typo="Typo.caption">Level @SelectedDungeon.OptimalPlayerLevel </MudText>
                </div>


                <div class="d-flex pa-2 gap-4">
                    <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Outlined.LocationOn" @bind-Value="@SelectedDungeon.EntranceMapId" Label="Entrée" />
                    <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Outlined.LocationOn" @bind-Value="@SelectedDungeon.ExitMapId" Label="Sortie" />

                </div>


                <MudTabs @ref="@tabs" AlwaysShowScrollButtons="true" ApplyEffectsToContainer=true Color="Color.Surface" DisableRipple=false @bind-ActivePanelIndex="@RoomIndex" Elevation="0" Outlined=true Rounded="true" PanelClass="pa-4">


                    @foreach (var room in SelectedDungeon.Rooms)
                    {
                        <MudTabPanel Text="@("Room "+(SelectedDungeon.Rooms.IndexOf(room)+1).ToString())">

                            @if (RoomIndex >= 0)
                            {
                                <div class="d-flex justify-space-between align-center gap-4 pa-2">
                                    <MudIconButton @onclick="() => MoveRoomLeft(CurrentRoom)" Color=Color.Primary Icon="@Icons.Material.Filled.ArrowBackIos"></MudIconButton>
                                    <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.DriveFileRenameOutline" ReadOnly=@true Value="@MapPositionRecord.GetMapName(CurrentRoom.MapId)" Label="Name" />
                                    <MudIconButton  @onclick="() => DeleteRoom(CurrentRoom)" Icon="@Icons.Filled.Delete" Color="Color.Error"></MudIconButton>
                                    <MudIconButton @onclick="() => MoveRoomRight(CurrentRoom)" Color=Color.Primary Icon="@Icons.Material.Filled.ArrowForwardIos"></MudIconButton>
                                </div>



                                <div class="d-flex gap-4 pa-2">
                                    <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Outlined.LocationOn"  @bind-Value="@CurrentRoom.MapId" Label="MapId" />
                                    <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Outlined.Timer" @bind-Value="@CurrentRoom.RespawnDelay" Label="Respawn delay" />

                                </div>


                                @if (CurrentRoom.MonsterIds.Count > 0)
                                {
                                    <MudDataGrid Class="mt-3" Dense=true Hover=true Striped=false Bordered=true T="KeyValuePair<int,MonsterRecord>" Items="RoomMonsters">
                                        <Columns>

                                            <TemplateColumn Title="Icon">
                                                <CellTemplate>
                                                    <MudImage Src="@(IconHelper.GetMonsterIcon((short)context.Item.Value.Id))" />
                                                </CellTemplate>
                                            </TemplateColumn>

                                            <TemplateColumn Title="Name">
                                                <CellTemplate>
                                                    <div class="d-flex gap-2">
                                                        <MudText Style="font-weight:600">(@context.Item.Value.Id)</MudText>
                                                        <MudText Style="font-weight:500">@context.Item.Value.Name</MudText>
                                                    </div>

                                                </CellTemplate>
                                            </TemplateColumn>


                                            <TemplateColumn Title="Actions">
                                                <CellTemplate>
                                                    <MudStack Row>


                                                    <MudIconButton @onclick="()=> this.MoveUpMonster(context.Item.Key)" Color=Color.Primary Icon="@Icons.Material.Filled.ArrowUpward"></MudIconButton>
                                                    <MudIconButton @onclick="()=> this.MoveDownMonster(context.Item.Key)" Color=Color.Primary Icon="@Icons.Material.Filled.ArrowDownward"></MudIconButton>
                                                    <MudButton @onclick="()=> this.DeleteMonster(context.Item.Key)" Size="@Size.Small" StartIcon="@Icons.Material.Filled.Delete" IconColor="Color.Primary" Variant="@Variant.Text" Color="@Color.Primary">Delete</MudButton>

                                                </MudStack>
                                            </CellTemplate>
                                        </TemplateColumn>

                                    </Columns>
                                </MudDataGrid>
                                }
                                else
                                {
                                    <MudChip Class="mt-2" Color="Color.Primary" Variant="Variant.Text">No monsters in this room</MudChip>
                                }

                            }

                            <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="AddMonster" Variant="Variant.Text" Color="Color.Primary">Add monster</MudButton>

                            <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="FromJeuOnline" Variant="Variant.Text" Color="Color.Primary">From JeuOnline</MudButton>

                        </MudTabPanel>
                    }


                </MudTabs>



            </MudPaper>


        </MudItem>


    }
</MudGrid>

@code {


    MudTabs tabs;

    List<MonsterRecord> SearchResults
    {
        get;
        set;
    } = new List<MonsterRecord>();

    Dictionary<int, MonsterRecord> RoomMonsters
    {
        get
        {
            Dictionary<int, MonsterRecord> result = new();

            for (int i = 0; i < CurrentRoom.MonsterIds.Count; i++)
            {
                result.Add(i, MonsterRecord.GetMonsterRecord(CurrentRoom.MonsterIds[i]));
            }

            return result;
        }
    }

    void DeleteRoom(MonsterRoom room)
    {
        SelectedDungeon.Rooms.Remove(room);
    }
    void MoveRoomRight(MonsterRoom room)
    {
        var roomIndex = SelectedDungeon.Rooms.IndexOf(room);

        if (roomIndex < SelectedDungeon.Rooms.Count - 1)
        {
            var previous = SelectedDungeon.Rooms[roomIndex + 1];
            SelectedDungeon.Rooms[roomIndex + 1] = room;
            SelectedDungeon.Rooms[roomIndex] = previous;
            StateHasChanged();
            RoomIndex++;
            tabs.ActivatePanel(RoomIndex);
        }
    }
    void MoveRoomLeft(MonsterRoom room)
    {
        var roomIndex = SelectedDungeon.Rooms.IndexOf(room);

        if (roomIndex > 0)
        {
            var previous = SelectedDungeon.Rooms[roomIndex - 1];
            SelectedDungeon.Rooms[roomIndex - 1] = room;
            SelectedDungeon.Rooms[roomIndex] = previous;
            StateHasChanged();
            RoomIndex--;

            tabs.ActivatePanel(RoomIndex);


        }
    }

    Color GetDungeonIconColor(DungeonRecord record)
    {
        if (record.Rooms.All(x => x.MonsterIds.Count == 0))
        {
            return Color.Warning;
        }
        else
        {
            return Color.Success;
        }
    }
    string GetDungeonIcon(DungeonRecord record)
    {
        for (int i = record.Rooms.Count - 1; i >= 0; i--)
        {
            var room = record.Rooms[i];

            foreach (var monsterId in room.MonsterIds)
            {
                MonsterRecord monster = MonsterRecord.GetMonsterRecord(monsterId);

                if (monster.IsBoss)
                {
                    return IconHelper.GetMonsterIcon(monsterId);
                }
            }
        }


        return IconHelper.GetMonsterIcon(5814);
    }



    async void FromJeuOnline()
    {
        var result = await DialogHelper.OpenDialog<TextInputDialog>(DialogService, new DialogParameters<TextInputDialog>(), "Dialog");

        if (!result.Cancelled)
        {

            var array = result.Data.ToString().Split('\n');

            foreach (var item in array)
            {
                var name = item.Replace("(", "");
                name = name.Replace(")", "");
                name = new string(name.Where(c => !char.IsDigit(c)).ToArray());
                name = name.Trim();

                var record = MonsterRecord.GetMonsterRecords().FirstOrDefault(x => x.Name.ToLower() == name.ToLower());

                if (record != null)
                {
                    CurrentRoom.MonsterIds.Add((short)record.Id);
                }
                else
                {

                }

            }
            StateHasChanged();
        }

    }
    void DeleteMonster(int index)
    {
        CurrentRoom.MonsterIds.RemoveAt(index);
        StateHasChanged();
  
    }
    void MoveUpMonster(int index)
    {
        if (index == 0)
        {
            return;
        }

        var previous = CurrentRoom.MonsterIds[index - 1];

        CurrentRoom.MonsterIds[index - 1] = CurrentRoom.MonsterIds[index];
        CurrentRoom.MonsterIds[index] = previous;

        StateHasChanged();


    }
    void MoveDownMonster(int index)
    {
        if (index == CurrentRoom.MonsterIds.Count - 1)
        {
            return;
        }

        var next = CurrentRoom.MonsterIds[index + 1];

        CurrentRoom.MonsterIds[index + 1] = CurrentRoom.MonsterIds[index];
        CurrentRoom.MonsterIds[index] = next;

        StateHasChanged();

    }

    async void AddMonster()
    {
        var result = await DialogHelper.OpenDialog<SelectMonsterDialog>(DialogService, new DialogParameters<SelectMonsterDialog>(), "Select monster");

        if (!result.Cancelled)
        {
            var record = (MonsterRecord)result.Data;
            CurrentRoom.MonsterIds.Add((short)record.Id);
            StateHasChanged();
        }


    }



    private string Search
    {
        get;
        set;
    } = "";
    private DungeonRecord SelectedDungeon
    {
        get; set;
    }
    private int RoomIndex
    {
        get;
        set;
    }
    private List<DungeonRecord> DungeonSearchResults
    {
        get;
        set;
    } = new List<DungeonRecord>();

    public MonsterRoom CurrentRoom => SelectedDungeon.Rooms.ElementAt(RoomIndex);

    public List<MonsterRecord> Monsters
    {
        get
        {
            return CurrentRoom.MonsterIds.Select(x => MonsterRecord.GetMonsterRecord(x)).ToList();
        }
    }

    private void SelectDungeon(DungeonRecord dungeon)
    {
        if (tabs != null)
        {
            tabs.ActivatePanel(0);
        }
        RoomIndex = 0;

        StateHasChanged();

        this.SelectedDungeon = dungeon;
        SelectedDungeon.UpdateLater();
    }
    private void OnSearchTextChanged()
    {
        DungeonSearchResults = DungeonRecord.GetDungeonRecords().Where(x => x.ToString().ToLower().Contains(Search.ToLower())).ToList();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {

    }
}
