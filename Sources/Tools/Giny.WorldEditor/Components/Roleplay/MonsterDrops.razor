@using Giny.AdditionalDrop;
@using Giny.IO.D2OClasses;
@using Giny.World.Records.Items;
@using Giny.World.Records.Monsters;
@using Giny.WorldEditor.Caching;
@using Microsoft.AspNetCore.Components.Web.Virtualization
<MudGrid>
    <MudItem xs="3">

        <MudPaper Outlined=true>
            <MudList Dense="true" Clickable="true">
                <MudListSubheader>
                    <MudTextField Label="Search" TextChanged=OnSearchTextChanged @bind-Value="@Search"
                                  AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Filled.Search"
                                  Adornment="Adornment.End" Immediate="true" Variant="Variant.Outlined" />
                </MudListSubheader>

                <div style="height:80vh;overflow-y:scroll">
                    @if (Loading)
                    {
                        <div class="d-flex align-center justify-center">
                            <MudProgressCircular Indeterminate="true" Color="Color.Primary"></MudProgressCircular>

                        </div>
                    }
                    <Virtualize Items="@SearchResults">


                        <MudListItem OnClick="() => SelectMonster(context)" Value="context">

                            <div class="d-flex flex-row gap-2 align-center">


                                <MudImage ObjectFit="ObjectFit.Fill" Width="60" Height="60" Src="@IconHelper.GetMonsterIcon((short)context.Id)" />

                                <div class="d-flex flex-column">
                                    <MudText Style="font-size:14px;font-weight:600;line-height:16px">@context.Name</MudText>
                                    <MudText Typo=Typo.caption Style="line-height:16px">@(Math.Round(Module.ComputeMonsterDropProbability(context.Grades.Last().Level) * 100d, 2)) %</MudText>

                                </div>
                            </div>

                        </MudListItem>

                    </Virtualize>
                </div>

            </MudList>

        </MudPaper>


    </MudItem>

    <MudItem xs="9">
        @if (SelectedMonster != null)
        {

            <MudDataGrid Height="90vh" Class="mt-3" Hover=true Striped=false ColumnResizeMode=ResizeMode.Column Bordered=true Items="GetSelectedDrops()">


                <Columns>
                    <TemplateColumn Title="Picture">
                        <CellTemplate>
                            <MudImage Width="40" Height="40" Src="@IconHelper.GetItemIcon(context.Item)" />

                        </CellTemplate>
                    </TemplateColumn>


                    <TemplateColumn Title="Name">
                        <CellTemplate>
                            <div class="d-flex flex-column gap-2">
                                <MudText Style="font-weight:500;line-height:16px">@context.Item.Name</MudText>

                                <MudText Style="line-height:16px" Typo="Typo.caption">@context.Item.Id</MudText>
                            </div>

                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Drop probability">
                        <CellTemplate>
                            <MudText Style="font-weight:500;line-height:16px">@Math.Round(Module.ComputeItemDropWeight(context.Item),1) %</MudText>
                        </CellTemplate>
                    </TemplateColumn>

                  



                </Columns>

            </MudDataGrid>
        }

    </MudItem>
</MudGrid>
@code {
    [Inject] private IDialogService DialogService { get; set; }

    [CascadingParameter]
    public Home Parent
    {
        get;
        set;
    }

    private MonsterRecord SelectedMonster
    {
        get;
        set;
    }
    private List<MonsterRecord> SearchResults
    {
        get;
        set;
    } = new List<MonsterRecord>();

    private string Search
    {
        get;
        set;
    } = "";

    private bool Loading = true;

    private void OnSearchTextChanged()
    {
        SearchResults = MonsterRecord.GetMonsterRecords().Where(x => x.ToString().ToLower().Contains(Search.ToLower())).ToList();
        StateHasChanged();
    }

    private CraftableDropModule Module
    {
        get;
        set;

    }
    private List<ItemRecord> GetSelectedDrops()
    {
        return Module.GetDrops(SelectedMonster);
    }
   
    private void SelectMonster(MonsterRecord item)
    {
        SelectedMonster = item;
    }
   
    protected override void OnAfterRender(bool firstRender)
    {
        if (Loading)
        {
            Module = ModuleHost.Instance.InitModule<CraftableDropModule>();
            Loading = false;
            StateHasChanged();

        }

        base.OnAfterRender(firstRender);
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
   
}

