@using Giny.Protocol.Enums;
@using Giny.World.Managers.Effects;
@using Giny.World.Records.Spells;
<MudItem xs="7">

    @if (SelectedSpell != null)
    {
        <MudCard Outlined="true">
            <MudCardContent>
                <MudText>@SelectedSpell.ToString()</MudText>
                <MudText Typo="Typo.body2">@SelectedSpell.Description</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary">Voir les effets</MudButton>
            </MudCardActions>
        </MudCard>
        <br />
        <MudGrid>
            <MudItem xs="3">
                <div Class="d-flex flex-column mud-width-full gap-4">


                    <MudPaper Outlined=true>
                        <MudListSubheader>
                            <MudText>Grades</MudText>
                        </MudListSubheader>
                        <MudList Dense="true" Clickable="true">

                            @foreach (SpellLevelRecord level in SelectedSpell.Levels)
                            {
                                <MudListItem OnClick="() => SelectSpellLevel(level)" Text=@level.ToString() />
                            }

                        </MudList>
                    </MudPaper>







                    @if (SelectedSpellLevel != null)
                    {


                        <MudPaper Outlined=true>
                            <MudList Dense="true" Clickable="true">
                                <MudListSubheader>
                                    <MudText>Grade @SelectedSpellLevel.Grade</MudText>
                                </MudListSubheader>
                                @foreach (EffectDice effect in SelectedSpellLevel.Effects)
                                {
                                    <MudListItem OnClick="() => SelectEffect(effect)" Text=@effect.ToString() />
                                }
                            </MudList>

                        </MudPaper>


                    }
                </div>
            </MudItem>

            @if (SelectedEffect != null)
            {
                <MudItem xs="9">


                    <MudCard MinHeight="600px">
                        <MudCardContent>
                            <MudText><b>@SelectedEffect.EffectEnum</b></MudText>
                            <br />


                            <MudSimpleTable Dense="true" Striped=true Elevation=10 Hover=false Bordered="true" Outlined=true>

                                <tbody Style="grid-auto-columns: minmax(10px, auto);">
                                    <tr>
                                        <td>Min,Max</td>
                                        <td>@(SelectedEffect.Min + "," + SelectedEffect.Max)</td>
                                    </tr>
                                    <tr>
                                        <td>Value</td>
                                        <td>@SelectedEffect.Value</td>
                                    </tr>
                                    <tr>
                                        <td>Duration</td>
                                        <td>@SelectedEffect.Duration</td>
                                    </tr>
                                    <tr>
                                        <td>Delay</td>
                                        <td>@SelectedEffect.Delay</td>
                                    </tr>
                                    <tr>
                                        <td>Target Masks</td>
                                        <td>@SelectedEffect.TargetMask</td>
                                    </tr>
                                    <tr>
                                        <td>Targets</td>
                                        <td>@SelectedEffect.GetTargetsString()</td>
                                    </tr>
                                    <tr>
                                        <td>Triggers</td>
                                        <td>@SelectedEffect.RawTriggers</td>
                                    </tr>

                                    <tr>
                                        <td>Triggers (Enum)</td>
                                        <td>@(SpellHelper.TriggersToString(SelectedEffect.Triggers))</td>
                                    </tr>

                                    <tr>
                                        <td>RawZone</td>
                                        <td>@SelectedEffect.RawZone</td>
                                    </tr>

                                    <tr>
                                        <td>Dispellable</td>
                                        <td>@((FightDispellableEnum)SelectedEffect.Dispellable)</td>
                                    </tr>

                                    <tr>
                                        <td>Random</td>
                                        <td>@SelectedEffect.Random</td>
                                    </tr>


                                    <tr>
                                        <td>Group</td>
                                        <td>@SelectedEffect.Group</td>
                                    </tr>

                                   

                                    @if (@SelectedEffect.IsSpellCastEffect())
                                    {
                                        <tr>
                                            <td>Casted Spell</td>
                                            <td>@(SpellHelper.GetTargetSpellName(SelectedEffect))</td>
                                        </tr>
                                    }

                                    @if (SpellHelper.IsSummonEffect(@SelectedEffect.EffectEnum))
                                    {
                                        <tr>
                                            <td>Summoned Monster</td>
                                            <td>@(SpellHelper.GetSummonedMonsterName(SelectedEffect))</td>
                                        </tr>
                                    }

                                    @if (SelectedEffect.EffectEnum == EffectsEnum.Effect_AddState || SelectedEffect.EffectEnum == EffectsEnum.Effect_DispelState)
                                    {
                                        <tr>
                                            <td>Spell State</td>
                                            <td>@(SpellHelper.GetSpellStateName(SelectedEffect))</td>
                                        </tr>
                                    }

                                    @if (SelectedEffect.EffectEnum == EffectsEnum.Effect_SpellBoostBaseDamage ||
                                   SelectedEffect.EffectEnum == EffectsEnum.Effect_SpellBoostMinimalRange ||
                                   SelectedEffect.EffectEnum == EffectsEnum.Effect_SpellBoostRange)
                                    {
                                        <tr>
                                            <td>Buffed Spell</td>
                                            <td>@(SpellHelper.GetTargetSpellName(SelectedEffect))</td>
                                        </tr>
                                    }

                                    @if (SelectedEffect.EffectEnum == EffectsEnum.Effect_RemoveSpellEffects)
                                    {
                                        <tr>
                                            <td>Debuffed Spell</td>
                                            <td>@(SpellHelper.GetDebuffedSpellName(SelectedEffect))</td>
                                        </tr>
                                    }




                                </tbody>
                            </MudSimpleTable>


                        </MudCardContent>
                        @if (@SelectedEffect.IsSpellCastEffect())
                        {
                            <MudCardActions>
                                <MudButton OnClick="()=> OnExploreClick(SelectedEffect)" Variant="Variant.Text" Color="Color.Primary">Explorer</MudButton>
                            </MudCardActions>
                        }
                    </MudCard>
                </MudItem>
            }








            @if (SelectedEffect == null && SelectedSpellLevel != null)
            {
                <MudItem xs="9">


                    <MudCard MinHeight="600px">
                        <MudCardContent>
                            <MudText><b>@("Grade " + SelectedSpellLevel.Grade)</b></MudText>
                            <br />


                            <MudSimpleTable Dense="true" Striped=true Elevation=10 Hover=false Bordered="true" Outlined=true>

                                <tbody Style="grid-auto-columns: minmax(10px, auto);">
                                    <tr>
                                        <td>Cout en PA</td>
                                        <td>@(SelectedSpellLevel.ApCost)</td>
                                    </tr>
                                    <tr>
                                        <td>Portée minimum</td>
                                        <td>@(SelectedSpellLevel.MinRange)</td>
                                    </tr>
                                    <tr>
                                        <td>Portée maximum</td>
                                        <td>@(SelectedSpellLevel.MaxRange)</td>
                                    </tr>

                                    <tr>
                                        <td>Taux Critique</td>
                                        <td>@(SelectedSpellLevel.CriticalHitProbability)</td>
                                    </tr>


                                    <tr>
                                        <td>Portée modifiable</td>
                                        <td>@(SelectedSpellLevel.RangeCanBeBoosted)</td>
                                    </tr>

                                    <tr>
                                        <td>Stacks max</td>
                                        <td>@(SelectedSpellLevel.MaxStack)</td>
                                    </tr>

                                    <tr>
                                        <td>Nombre de lancer par tour</td>
                                        <td>@(SelectedSpellLevel.MaxCastPerTurn)</td>
                                    </tr>
                                    <tr>
                                        <td>Nombre de lancer par cible</td>
                                        <td>@(SelectedSpellLevel.MaxCastPerTarget)</td>
                                    </tr>
                                    <tr>
                                        <td>Interval de relance mimimum</td>
                                        <td>@(SelectedSpellLevel.MinCastInterval)</td>
                                    </tr>
                                    <tr>
                                        <td>Interval de relance initial</td>
                                        <td>@(SelectedSpellLevel.InitialCooldown)</td>
                                    </tr>
                                    <tr>
                                        <td>Interval de relance global</td>
                                        <td>@(SelectedSpellLevel.GlobalCooldown)</td>
                                    </tr>

                                    <tr>
                                        <td>Etats requis</td>
                                        <td>@SpellHelper.GetRequiredStatesNames(SelectedSpellLevel)</td>
                                    </tr>
                                    <tr>
                                        <td>Etats interdits</td>
                                        <td>@SpellHelper.GetForbiddenStatesNames(SelectedSpellLevel)</td>
                                    </tr>


                                </tbody>
                            </MudSimpleTable>


                        </MudCardContent>

                    </MudCard>
                </MudItem>
            }







        </MudGrid>
    }

</MudItem>

@code {




    [Inject]
    private IDialogService DialogService
    {
        get;
        set;
    }

    [Parameter]
    public SpellRecord SelectedSpell
    {
        get;
        set;
    }
    [Parameter]
    public SpellLevelRecord SelectedSpellLevel
    {
        get;
        set;
    }
    [Parameter]
    public EffectDice SelectedEffect
    {
        get;
        set;
    }
    public List<KeyValuePair<SpellRecord, SpellLevelRecord>> History
    {
        get;
        set;
    } = new List<KeyValuePair<SpellRecord, SpellLevelRecord>>();

    public event Action HistoryChanged;

    public void SelectEffect(EffectDice effect)
    {
        SelectedEffect = effect;
        StateHasChanged();

    }
    public void SelectSpell(SpellRecord spell)
    {
        SelectedSpell = spell;
        SelectedSpellLevel = null;
        SelectedEffect = null;
        StateHasChanged();
    }
    public void SelectSpellLevel(SpellLevelRecord level)
    {
        SelectedSpellLevel = level;
        SelectedEffect = null;
        StateHasChanged();
    }

    private void OnExploreClick(EffectDice effect)
    {
        var spell = SpellRecord.GetSpellRecord((short)effect.Min);

        if (spell != null)
        {
            History.Add(new KeyValuePair<SpellRecord, SpellLevelRecord>(SelectedSpell, SelectedSpellLevel));


            SelectSpell(spell);
            SelectSpellLevel(spell.GetLevel((byte)effect.Max));

            History.Add(new KeyValuePair<SpellRecord, SpellLevelRecord>(SelectedSpell, SelectedSpellLevel));
            HistoryChanged?.Invoke();
        }
        else
        {
            DialogService.ShowMessageBox("Erreur", "Le sort demandé est introuvable.");
        }

    }
    public void ClearHistory()
    {
        History = new List<KeyValuePair<SpellRecord, SpellLevelRecord>>();
        HistoryChanged?.Invoke();
    }
}
