@using Giny.IO.D2I;
@using Giny.IO.D2O;
@using Giny.IO.D2OClasses;
@using Giny.WorldView.Config;
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Components;
@using MudBlazor.Services;
@using System.Reflection;
@using System.Collections;

<MudGrid>
    <MudItem xs="3">

        <MudPaper Outlined=true>
            <MudList Dense="true" Clickable="true">
                <MudListSubheader>
                    <MudTextField Label="Search" TextChanged=OnSearchTextChanged @bind-Value="@Search"
                                  AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Filled.Search"
                                  Adornment="Adornment.End" Immediate="true" Variant="Variant.Outlined" />
                </MudListSubheader>

                <div style="height:70vh;overflow-y:scroll">
                    <Virtualize Items="@Filenames">
                        <MudListItem Typo="Typo.body2" OnClick="() => SelectD2OFile(context)" Text=@context />
                    </Virtualize>
                </div>

            </MudList>

        </MudPaper>

    </MudItem>
    <MudItem xs="10">

        <MudPaper Outlined=true>
            @if (Values != null)
            {
                <MudTable Dense="true" Hover="true" HorizontalScrollbar="true" Filter="new Func<object,bool>(FilterFunc1)" Items="@Values">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">@SelectedD2OFile</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        @foreach (PropertyInfo p in Values[0].GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy))
                        {
                            <MudTh>@p.Name</MudTh>
                        }
                    </HeaderContent>

                    <RowTemplate>
                        @foreach (PropertyInfo p in Values[0].GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy))
                        {
                            <MudTd>@GetFieldValue(p ,context)</MudTd>
                        }
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50,Values.Count }" InfoFormat="@($"Center {infoFormat}")" HorizontalAlignment="HorizontalAlignment.Center" />
                    </PagerContent>
                </MudTable>
            }


        </MudPaper>

    </MudItem>
</MudGrid>

@code {
    private string searchString1 = "";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private List<string> Filenames
    {
        get;
        set;
    }
    private string Search
    {
        get;
        set;
    }
    private List<object> Values
    {
        get;
        set;
    }
    private string SelectedD2OFile
    {
        get;
        set;
    }
    private bool FilterFunc1(object element) => FilterFunc(element, searchString1);

    private bool FilterFunc(object element, string searchString)
    {

        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        foreach (var property in element.GetType().GetProperties())
        {
            var value = GetFieldValue(property, element);

            if (value.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
        }

        return false;
    }

    private void OnSearchTextChanged()
    {
        Filenames = D2OManager.GetFilenames().Where(x => x.ToString().ToLower().Contains(Search.ToLower())).ToList();
    }

    private object GetFieldValue(PropertyInfo property, object context)
    {
        try
        {
            var value = property.GetValue(context)!;

            var result = "";

            if (value is MonsterBonusCharacteristics)
            {
                var v = (MonsterBonusCharacteristics)value;
                return "LifePoints :" + v.lifePoints;
            }
            if (value is IEnumerable collection && !(value is string))
            {
                var TEST = value.GetType();

                if (value is List<List<int>>)
                {
                    var val = value as List<List<int>>;

                    string res = "";
                    foreach (var v in val)
                    {
                        res += string.Join(',', v);
                        res += ";";
                    }
                    result = res;
                }
                else
                {

                    string collectionString = string.Join(", ", collection.Cast<object>());
                    result = collectionString;
                }


            }
            else if (property.Name == "LongNameId" || property.Name == "NameId" || property.Name == "ShortNameId"
            || property.Name == "DescriptionId")
            {
                result = D2IManager.GetText(int.Parse(value.ToString()));
            }
            else
            {
                result = value.ToString();
            }


            if (result.Length > 40)
            {
                result = result.Substring(0, 40);
                result += "...";
            }
            return result;
        }
        catch
        {
            return "[Uncomputed]";
        }
    }
    private void SelectD2OFile(string name)
    {
        SelectedD2OFile = name.Split('.')[0];
        Values = D2OManager.GetObjects(name).ToList();

        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        Filenames = D2OManager.GetFilenames().ToList();
    }

}
