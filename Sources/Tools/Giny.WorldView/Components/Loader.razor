@using Giny.IO.D2I;
@using Giny.IO.D2O;
@using Giny.IO;
@using Giny.ORM
@using Giny.Protocol;
@using Giny.World.Managers.Fights.Effects
@using Giny.World.Modules
@using Giny.World.Records.Breeds
@using Giny.World.Records.Effects
@using Giny.World.Records.Items
@using Giny.World.Records.Maps;
@using Giny.World.Records.Monsters
@using Giny.World.Records.Spells;
@using System.Reflection
@using Giny.WorldView.Config

@inject NavigationManager UriHelper
@implements IDisposable

@code
{
    int i = 0;
}

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Align="Align.Center" Class="mt-6" Typo="Typo.h2">Giny</MudText>
    <MudText Align="Align.Center" Typo="Typo.subtitle2">WorldEditor</MudText>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />

  
    <MudTimeline Class="mt-12" TimelineOrientation="TimelineOrientation.Horizontal">




        @foreach (var step in Steps)
        {
            var align = TimelineAlign.Default;

            if (i % 2 == 0)
            {
                align = TimelineAlign.End;
            }
            else
            {
                align = TimelineAlign.End;
            }

            if (step.Done)
            {
                <MudTimelineItem Elevation="25" TimelineAlign="@align" Size="Size.Small" Color="Color.Primary">

                    <MudText Style="white-space:nowrap" Typo="Typo.button">@step.Name</MudText>
                    <MudText Style="white-space:nowrap" Typo="Typo.body2" Class="mud-text-secondary">Terminé</MudText>

                </MudTimelineItem>

            }
            else if (step.Error)
            {
                <MudTimelineItem Elevation="25" TimelineAlign="@align" Size="Size.Small" Color="Color.Error">
                    <ItemContent>
                        <MudAlert Style="white-space:nowrap" Severity="Severity.Error">Impossible de charger les données</MudAlert>
                    </ItemContent>
                    <ItemOpposite>
                        <MudText Typo="Typo.button" Color="Color.Error">@step.Name</MudText>
                    </ItemOpposite>
                </MudTimelineItem>
            }
            else if (step.Running)
            {
                <MudTimelineItem Elevation="25" TimelineAlign="@align" Size="Size.Small" Color="Color.Info">
                    <MudText Style="white-space:nowrap" Typo="Typo.button">@step.Name</MudText>
                    <MudText Style="white-space:nowrap" Typo="Typo.body2" Class="mud-text-secondary">En cours...</MudText>
                </MudTimelineItem>
            }
            else
            {
                <MudTimelineItem Elevation="25" TimelineAlign="@align" Size="Size.Small">
                    <MudText Style="white-space:nowrap" Typo="Typo.button">@step.Name</MudText>
                    <MudText Style="white-space:nowrap" Typo="Typo.body2" Class="mud-text-secondary">En attente...</MudText>

                </MudTimelineItem>

            }

            i++;




        }
    </MudTimeline>



</MudContainer>




@code {
    [Inject] private IDialogService DialogService { get; set; }

    private int Index;

    [CascadingParameter]
    public Home Parent
    {
        get;
        set;
    }


    private Task LoadTask
    {
        get;
        set;
    }

    private List<LoadingStep> Steps
    {
        get;
        set;
    } = new()
    {
        new LoadingStep("D2O Files",()=>D2OManager.Initialize(Path.Combine(ConfigFile.Instance.ClientPath, ClientConstants.D2oDirectory)) ),
        new LoadingStep("D2I Files",()=>D2IManager.Initialize(Path.Combine(ConfigFile.Instance.ClientPath, ClientConstants.i18nPath)) ),
        new LoadingStep("Effects",()=> DatabaseManager.Instance.LoadTable<EffectRecord>()),
        new LoadingStep("Breeds",()=>DatabaseManager.Instance.LoadTable<BreedRecord>()),
        new LoadingStep("Items",()=>DatabaseManager.Instance.LoadTable<ItemRecord>()),
        new LoadingStep("Monsters",()=> DatabaseManager.Instance.LoadTable<MonsterRecord>()),
        new LoadingStep("Dungeons",()=>DatabaseManager.Instance.LoadTable<DungeonRecord>()),
        new LoadingStep("Spells",()=>{DatabaseManager.Instance.LoadTable<SpellRecord>();DatabaseManager.Instance.LoadTable<SpellLevelRecord>();DatabaseManager.Instance.LoadTable<SpellStateRecord>(); }),
        new LoadingStep("Maps",()=>DatabaseManager.Instance.LoadTable<MapPositionRecord>()),
        new LoadingStep("Spell Links",()=> {SpellEffectManager.Instance.Initialize();
               SpellRecord.Initialize();})
    };


    protected override void OnInitialized()
    {
        ConfigFile.Initialize();

        DatabaseManager.Instance.Initialize(Assembly.GetAssembly(typeof(SpellRecord)),
        ConfigFile.Instance.SQLHost, ConfigFile.Instance.SQLDBName, ConfigFile.Instance.SQLUser, ConfigFile.Instance.SQLPassword);

        try
        {
            DatabaseManager.Instance.UseProvider();
        }
        catch (Exception ex)
        {
            OnConfigurationError("Les paramètres actuels ne permettent pas de se connecter a la base de données. Veuillez éditer la configuration");
            return;

        }

        if (!IsClientPathValid())
        {
            OnConfigurationError("Les paramètres actuels ne permettent pas de localiser le client, veuillez éditer la configuration.");
            return;
        }

        DatabaseManager.Instance.OnStartLoadTable += OnStartLoadTable;

        LoadTask = Task.Run(() =>
           {
               AssemblyCore.OnAssembliesLoaded();

               foreach (var step in Steps)
               {
                   try
                   {
                       step.Execute();
                   }
                   catch (Exception ex)
                   {

                       step.Error = true;
                       InvokeAsync(() =>
                  {
                      DisplayError(ex.Message);
                      StateHasChanged();
                  });
                       AppState.Initialized = true;
                       return;
                   }
                   OnStepReached();
               }


               InvokeAsync(() =>
               {
                   AppState.Initialized = true;
                   Parent.Navigate(PageEnum.SpellExplorer);
               });


           });

    }
    private bool IsClientPathValid()
    {
        var d2oPath = Path.Combine(ConfigFile.Instance.ClientPath, ClientConstants.D2oDirectory);

        if (!Directory.Exists(d2oPath))
        {
            return false;
        }

        return true;
    }
    private void OnConfigurationError(string message)
    {
        AppState.Initialized = true;
        DisplayError(message);
        Parent.Navigate(PageEnum.Configuration);
    }
    private void DisplayError(string message)
    {
        DialogService.ShowMessageBox(
         "Erreur",
         message);
    }
    public void Dispose()
    {
        // Kill Load Task
    }
    private void OnStepReached()
    {
        InvokeAsync(() =>
              {
                  StateHasChanged();
              });
    }
    private void OnStartLoadTable(Type type, string name)
    {
        //OnStepReached(type.Name);
    }
}
