@using Giny.Protocol.Enums
@using Giny.World.Managers.Effects
@using Giny.World.Records.Monsters
@using Giny.World.Records.Spells
@using Microsoft.AspNetCore.Components.Web.Virtualization


<MudGrid>
    <MudItem xs="2">

        <MudPaper Outlined=true>
            <MudList Color="Color.Primary" Dense="true" Clickable="true">
                <MudListSubheader>
                    <MudTextField Label="Search" TextChanged=OnSearchTextChanged @bind-Value="@Search"
                                  AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Filled.Search"
                                  Adornment="Adornment.End" Immediate="true" Variant="Variant.Outlined" />
                </MudListSubheader>

                <div style="height:70vh;overflow-y:scroll">
                    <Virtualize Items="@SearchResults">
                        <MudListItem Typo="Typo.body2" OnClick="() => SelectSpell(context)" Text=@context.Name />
                    </Virtualize>
                </div>

            </MudList>

        </MudPaper>

    </MudItem>


    <MudItem xs="8">

        @if (SelectedSpell != null)
        {
            <MudCard Outlined="true">
                <MudCardContent>
                    <MudText>@SelectedSpell.ToString()</MudText>
                    <MudText Typo="Typo.body2">@SelectedSpell.Description</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary">Voir les effets</MudButton>
                </MudCardActions>
            </MudCard>
            <br />
            <MudGrid>

                <MudItem xs="2">
                    <MudPaper Outlined=true MinHeight="600px">
                        <MudListSubheader>
                            <MudText>Grades</MudText>
                        </MudListSubheader>
                        <MudList Dense="true" Clickable="true">

                            @foreach (SpellLevelRecord level in SelectedSpell.Levels)
                            {
                                <MudListItem OnClick="() => SelectSpellLevel(level)" Text=@level.ToString() />
                            }

                        </MudList>
                    </MudPaper>
                </MudItem>






                @if (SelectedSpellLevel != null)
                {

                    <MudItem xs="3">
                        <MudPaper Outlined=true MinHeight="600px">
                            <MudList Dense="true" Clickable="true">
                                <MudListSubheader>
                                    <MudText>Grade @SelectedSpellLevel.Grade</MudText>
                                </MudListSubheader>
                                @foreach (EffectDice effect in SelectedSpellLevel.Effects)
                                {
                                    <MudListItem OnClick="() => SelectEffect(effect)" Text=@effect.ToString() />
                                }
                            </MudList>

                        </MudPaper>

                    </MudItem>
                    @if (SelectedEffect != null)
                    {
                        <MudItem xs="7">


                            <MudCard MinHeight="600px">
                                <MudCardContent>
                                    <MudText><b>@SelectedEffect.EffectEnum</b></MudText>
                                    <br />


                                    <MudSimpleTable Dense="true" Striped=true Elevation=10 Hover=false Bordered="true" Outlined=true>

                                        <tbody Style="grid-auto-columns: minmax(10px, auto);">
                                            <tr>
                                                <td>Min,Max</td>
                                                <td>@(SelectedEffect.Min + "," + SelectedEffect.Max)</td>
                                            </tr>
                                            <tr>
                                                <td>Value</td>
                                                <td>@SelectedEffect.Value</td>
                                            </tr>
                                            <tr>
                                                <td>Duration</td>
                                                <td>@SelectedEffect.Duration</td>
                                            </tr>
                                            <tr>
                                                <td>Delay</td>
                                                <td>@SelectedEffect.Delay</td>
                                            </tr>
                                            <tr>
                                                <td>Target Masks</td>
                                                <td>@SelectedEffect.TargetMask</td>
                                            </tr>
                                            <tr>
                                                <td>Targets</td>
                                                <td>@GetTargets(SelectedEffect)</td>
                                            </tr>
                                            <tr>
                                                <td>Triggers</td>
                                                <td>@SelectedEffect.RawTriggers</td>
                                            </tr>

                                            <tr>
                                                <td>Triggers (Enum)</td>
                                                <td>@(TriggersToString(SelectedEffect.Triggers))</td>
                                            </tr>

                                            <tr>
                                                <td>RawZone</td>
                                                <td>@SelectedEffect.RawZone</td>
                                            </tr>

                                            <tr>
                                                <td>Dispellable</td>
                                                <td>@((FightDispellableEnum)SelectedEffect.Dispellable)</td>
                                            </tr>

                                            <tr>
                                                <td>Random</td>
                                                <td>@SelectedEffect.Random</td>
                                            </tr>


                                            <tr>
                                                <td>Group</td>
                                                <td>@SelectedEffect.Group</td>
                                            </tr>

                                            @if (IsSpellCastEffect(@SelectedEffect.EffectEnum))
                                            {
                                                <tr>
                                                    <td>Casted Spell</td>
                                                    <td>@(GetTargetSpellName(SelectedEffect))</td>
                                                </tr>
                                            }

                                            @if (IsSummonEffect(@SelectedEffect.EffectEnum))
                                            {
                                                <tr>
                                                    <td>Summoned Monster</td>
                                                    <td>@(GetSummonedMonsterName(SelectedEffect))</td>
                                                </tr>
                                            }

                                            @if (SelectedEffect.EffectEnum == EffectsEnum.Effect_AddState || SelectedEffect.EffectEnum == EffectsEnum.Effect_DispelState)
                                            {
                                                <tr>
                                                    <td>Spell State</td>
                                                    <td>@(GetSpellStateName(SelectedEffect))</td>
                                                </tr>
                                            }

                                            @if (SelectedEffect.EffectEnum == EffectsEnum.Effect_SpellBoostBaseDamage ||
                                           SelectedEffect.EffectEnum == EffectsEnum.Effect_SpellBoostMinimalRange ||
                                           SelectedEffect.EffectEnum == EffectsEnum.Effect_SpellBoostRange)
                                            {
                                                <tr>
                                                    <td>Buffed Spell</td>
                                                    <td>@(GetTargetSpellName(SelectedEffect))</td>
                                                </tr>
                                            }

                                            @if (SelectedEffect.EffectEnum == EffectsEnum.Effect_RemoveSpellEffects)
                                            {
                                                <tr>
                                                    <td>Debuffed Spell</td>
                                                    <td>@(GetDebuffedSpellName(SelectedEffect))</td>
                                                </tr>
                                            }




                                        </tbody>
                                    </MudSimpleTable>


                                </MudCardContent>
                                @if (IsSpellCastEffect(@SelectedEffect.EffectEnum))
                                {
                                    <MudCardActions>
                                        <MudButton OnClick="()=> OnExploreClick(SelectedEffect)" Variant="Variant.Text" Color="Color.Primary">Explore</MudButton>
                                    </MudCardActions>
                                }
                            </MudCard>
                        </MudItem>
                    }








                    @if (SelectedEffect == null && SelectedSpellLevel != null)
                    {
                        <MudItem xs="7">


                            <MudCard MinHeight="600px">
                                <MudCardContent>
                                    <MudText><b>@("Grade " + SelectedSpellLevel.Grade)</b></MudText>
                                    <br />


                                    <MudSimpleTable Dense="true" Striped=true Elevation=10 Hover=false Bordered="true" Outlined=true>

                                        <tbody Style="grid-auto-columns: minmax(10px, auto);">
                                            <tr>
                                                <td>Cout en PA</td>
                                                <td>@(SelectedSpellLevel.ApCost)</td>
                                            </tr>
                                            <tr>
                                                <td>Portée minimum</td>
                                                <td>@(SelectedSpellLevel.MinRange)</td>
                                            </tr>
                                            <tr>
                                                <td>Portée maximum</td>
                                                <td>@(SelectedSpellLevel.MaxRange)</td>
                                            </tr>

                                            <tr>
                                                <td>Taux Critique</td>
                                                <td>@(SelectedSpellLevel.CriticalHitProbability)</td>
                                            </tr>


                                            <tr>
                                                <td>Portée modifiable</td>
                                                <td>@(SelectedSpellLevel.RangeCanBeBoosted)</td>
                                            </tr>

                                            <tr>
                                                <td>Stacks max</td>
                                                <td>@(SelectedSpellLevel.MaxStack)</td>
                                            </tr>

                                            <tr>
                                                <td>Nombre de lancer par tour</td>
                                                <td>@(SelectedSpellLevel.MaxCastPerTurn)</td>
                                            </tr>
                                            <tr>
                                                <td>Nombre de lancer par cible</td>
                                                <td>@(SelectedSpellLevel.MaxCastPerTarget)</td>
                                            </tr>
                                            <tr>
                                                <td>Interval de relance mimimum</td>
                                                <td>@(SelectedSpellLevel.MinCastInterval)</td>
                                            </tr>
                                            <tr>
                                                <td>Interval de relance initial</td>
                                                <td>@(SelectedSpellLevel.InitialCooldown)</td>
                                            </tr>
                                            <tr>
                                                <td>Interval de relance global</td>
                                                <td>@(SelectedSpellLevel.GlobalCooldown)</td>
                                            </tr>

                                            <tr>
                                                <td>Etats requis</td>
                                                <td>@GetRequiredStatesNames(SelectedSpellLevel)</td>
                                            </tr>
                                            <tr>
                                                <td>Etats interdits</td>
                                                <td>@GetForbiddenStatesNames(SelectedSpellLevel)</td>
                                            </tr>


                                        </tbody>
                                    </MudSimpleTable>


                                </MudCardContent>

                            </MudCard>
                        </MudItem>
                    }



                }




            </MudGrid>
        }

    </MudItem>
    <MudItem xs="2">

        <MudPaper Outlined=true>
            <MudList Dense="true" Clickable="true">

                <MudListSubheader>
                    <MudButton OnClick="()=> ClearHistory()" Color="Color.Primary">Vider l'historique</MudButton>
                </MudListSubheader>


                <div style="height:70vh;overflow-y:scroll">
                    <Virtualize Items="@History">
                        <MudListItem OnClick="() => {SelectSpell(context.Key); SelectSpellLevel(context.Value);} " Text="@(context.Key+" ("+ context.Value.Grade+")")" />
                    </Virtualize>
                </div>

            </MudList>

        </MudPaper>

    </MudItem>

</MudGrid>


@code {
    private const string UnknownDataText = "Aucune données.";

    [Inject]
    private IDialogService DialogService
    {
        get;
        set;
    }

    private List<SpellRecord> SearchResults
    {
        get;
        set;
    } = new List<SpellRecord>();

    private string Search
    {
        get;
        set;
    } = "";

    private SpellRecord SelectedSpell
    {
        get;
        set;
    }
    private SpellLevelRecord SelectedSpellLevel
    {
        get;
        set;
    }
    private EffectDice SelectedEffect
    {
        get;
        set;
    }
    private List<KeyValuePair<SpellRecord, SpellLevelRecord>> History
    {
        get;
        set;
    } = new List<KeyValuePair<SpellRecord, SpellLevelRecord>>();

    private void OnExploreClick(EffectDice effect)
    {
        var spell = SpellRecord.GetSpellRecord((short)effect.Min);

        if (spell != null)
        {
            History.Add(new KeyValuePair<SpellRecord, SpellLevelRecord>(SelectedSpell, SelectedSpellLevel));


            SelectSpell(spell);
            SelectSpellLevel(spell.GetLevel((byte)effect.Max));

            History.Add(new KeyValuePair<SpellRecord, SpellLevelRecord>(SelectedSpell, SelectedSpellLevel));
        }
        else
        {
            DialogService.ShowMessageBox("Erreur", "Le sort demandé est introuvable.");
        }

    }

    private void ClearHistory()
    {
        History = new List<KeyValuePair<SpellRecord, SpellLevelRecord>>();
    }
    private string GetRequiredStatesNames(SpellLevelRecord level)
    {
        return string.Join(',', level.StatesRequired.Select(x => SpellStateRecord.GetSpellStateRecord(x)));
    }
    private string GetForbiddenStatesNames(SpellLevelRecord level)
    {
        return string.Join(',', level.StatesForbidden.Select(x => SpellStateRecord.GetSpellStateRecord(x)));
    }
    private string GetSpellStateName(EffectDice effect)
    {
        var state = SpellStateRecord.GetSpellStateRecord(effect.Value);

        if (state == null)
        {
            return UnknownDataText;
        }
        else
        {
            return state.ToString();
        }
    }
    private string GetSummonedMonsterName(EffectDice effect)
    {
        MonsterRecord monster = MonsterRecord.GetMonsterRecord((short)effect.Min);

        if (monster == null)
        {
            return UnknownDataText;
        }
        else
        {
            return monster.ToString();
        }
    }
    private bool IsSummonEffect(EffectsEnum effect)
    {
        switch (effect)
        {
            case EffectsEnum.Effect_Summon:
            case EffectsEnum.Effect_SummonSlave:
                return true;
        }

        return false;
    }
    private string GetTargetSpellName(EffectDice effect)
    {
        SpellRecord spell = SpellRecord.GetSpellRecord((short)effect.Min);

        if (spell != null)
        {
            return spell.ToString();
        }
        else
        {
            return UnknownDataText;
        }
    }
    private string GetDebuffedSpellName(EffectDice effect)
    {
        SpellRecord spell = SpellRecord.GetSpellRecord((short)effect.Value);

        if (spell != null)
        {
            return spell.ToString();
        }
        else
        {
            return UnknownDataText;
        }
    }
    private bool IsSpellCastEffect(EffectsEnum effect)
    {
        switch (effect)
        {
            case EffectsEnum.Effect_TargetExecuteSpellWithAnimation:
            case EffectsEnum.Effect_TargetExecuteSpell:
            case EffectsEnum.Effect_TargetExecuteSpellOnCell:
            case EffectsEnum.Effect_CasterExecuteSpellGlobalLimitation:
            case EffectsEnum.Effect_CastSpell_1175:
            case EffectsEnum.Effect_CasterExecuteSpell:
            case EffectsEnum.Effect_SourceExecuteSpellOnSource:
            case EffectsEnum.Effect_SourceExecuteSpellOnTarget:
            case EffectsEnum.Effect_TargetExecuteSpellOnSource:
            case EffectsEnum.Effect_TargetExecuteSpellGlobalLimitation:
            case EffectsEnum.Effect_TargetExecuteSpellOnSourceGlobalLimitation:
            case EffectsEnum.Effect_Trap:
            case EffectsEnum.Effect_CasterExecuteSpellOnCell:
                return true;
        }

        return false;
    }
    private string TriggersToString(IEnumerable<World.Managers.Fights.Triggers.Trigger> triggers)
    {
        string result = string.Empty;

        foreach (var trigger in triggers)
        {
            result += trigger.Type;

            if (trigger.Value.HasValue)
            {
                result += " (" + trigger.Value + ")";
            }

            if (trigger != triggers.Last())
                result += ",";
        }

        return result;
    }
    private string GetTargets(EffectDice effect)
    {
        string targets = string.Join(",", effect.GetTargets());

        if (targets == string.Empty)
        {
            targets = "ALL";
        }

        return targets;
    }
    private void SelectEffect(EffectDice effect)
    {
        SelectedEffect = effect;

    }
    private void SelectSpell(SpellRecord spell)
    {
        SelectedSpell = spell;
        SelectedSpellLevel = null;
        SelectedEffect = null;
    }
    private void SelectSpellLevel(SpellLevelRecord level)
    {
        SelectedSpellLevel = level;
        SelectedEffect = null;
    }
    private void OnSearchTextChanged()
    {
        SearchResults = SpellRecord.GetSpellRecords().Where(x => x.ToString().ToLower().Contains(Search.ToLower())).ToList();
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        if (AppState.SpellExplorerTarget != null)
        {
            SelectedSpell = AppState.SpellExplorerTarget;
            AppState.SpellExplorerTarget = null;
            StateHasChanged();
        }
    }

}